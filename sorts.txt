#include <stdio.h>

void selectionSort(int a[], int n){
  for (int i = 0; i < n - 1; i++){
      int min = i;
      for (int j = i + 1; j < n; j++){
	  if (a[j] < a[min])
	    min = j;
	}
      int temp = a[i];
      a[i] = a[min];
      a[min] = temp;
    }
}

void bubbleSort(int a[], int n){
    for(int i = 0; i < n-1; i++){      
        for (int j = 0; j < n-i-1; j++)  
        if (a[j] > a[j+1]){  
            int temp = a[j];
            a[j] = a[j+1];
            a[j+1] = temp;
        }
    }
}  


void insertionSort(int a[], int n){
    for(int i = 1; i < n; i++){  
        int key = a[i];  
        int j = i - 1;  
        while (j >= 0 && a[j] > key){  
            a[j + 1] = a[j];  
            j = j - 1;  
        }  
        a[j + 1] = key;  
    }  
}

void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    int L[n1], R[n2]; 
  
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j]; 
  
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
  
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  
void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 

int main(){
  int a[] = { 2, 7, 4, 1, 9, 3};
//   insertionSort(a, 6);
//   selectionSort(a, 6);
//   bubbleSort(a, 6);
  mergeSort(a, 0, 6 - 1); 
  
  for (int i = 0; i < 6; i++)
      printf ("%d", a[i]);
  return 0;
}
